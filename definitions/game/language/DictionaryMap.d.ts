/*!
 * Copyright 2011-2023 Unlok
 * https://www.unlok.ca
 *
 * Credits & Thanks:
 * https://www.unlok.ca/credits-thanks/
 *
 * Wayward is a copyrighted and licensed work. Modification and/or distribution of any source files is prohibited. If you wish to modify the game in any way, please refer to the modding guide:
 * https://github.com/WaywardGame/types/wiki
 */
import { Command } from "@wayward/game/command/ICommand";
import { Quality } from "@wayward/game/game/IObject";
import { BiomeType } from "@wayward/game/game/biome/IBiome";
import { CurseComponent } from "@wayward/game/game/deity/Curse";
import { Deity } from "@wayward/game/game/deity/Deity";
import { DeityAlignmentLevel, FerocityLevel } from "@wayward/game/game/deity/IDeities";
import { DoodadType, DoodadTypeExtra, DoodadTypeGroup, GrowingStage } from "@wayward/game/game/doodad/IDoodad";
import { CombatDangerLevel, CombatStrength } from "@wayward/game/game/entity/CombatStrengthManager";
import { AiType, DamageType, StatusType } from "@wayward/game/game/entity/IEntity";
import { EquipType, SkillType } from "@wayward/game/game/entity/IHuman";
import { Stat } from "@wayward/game/game/entity/IStats";
import { ActionType } from "@wayward/game/game/entity/action/IAction";
import { MapQuality } from "@wayward/game/game/entity/action/actions/map/MapQuality";
import { UsableActionType } from "@wayward/game/game/entity/action/usable/UsableActionType";
import { CreatureType } from "@wayward/game/game/entity/creature/ICreature";
import { NPCType } from "@wayward/game/game/entity/npc/INPCs";
import { Source } from "@wayward/game/game/entity/player/IMessageManager";
import { WeightStatus } from "@wayward/game/game/entity/player/IPlayer";
import { QuestType } from "@wayward/game/game/entity/player/quest/quest/IQuest";
import { QuestRequirementType } from "@wayward/game/game/entity/player/quest/requirement/IRequirement";
import { BadTemperatureLevel } from "@wayward/game/game/entity/status/handler/IBadTemperature";
import { BleedLevel } from "@wayward/game/game/entity/status/handler/IBleeding";
import { ExhaustionLevel } from "@wayward/game/game/entity/status/handler/IExhausted";
import { InfoDisplayLevel } from "@wayward/game/game/inspection/IInfoProvider";
import { InspectType } from "@wayward/game/game/inspection/IInspection";
import { Level } from "@wayward/game/game/inspection/infoProviders/ILevel";
import { DurabilityLevel } from "@wayward/game/game/inspection/infoProviders/doodad/IDurability";
import { BookType, ContainerSort, EquipEffect, ItemType, ItemTypeExtra, ItemTypeGroup, RecipeLevel } from "@wayward/game/game/item/IItem";
import { CraftEfficacy } from "@wayward/game/game/item/recipe/Crafter";
import { MagicalPropertyType } from "@wayward/game/game/magic/MagicalPropertyType";
import { DrawnMapTheme } from "@wayward/game/game/mapping/IMapRender";
import { AutoSaveMode } from "@wayward/game/game/meta/IAutoSave";
import { Load } from "@wayward/game/game/meta/Loading";
import { Prompt } from "@wayward/game/game/meta/prompt/IPrompt";
import { Milestone } from "@wayward/game/game/milestones/IMilestone";
import { GameMode, UnlockedRecipesStrategy } from "@wayward/game/game/options/IGameOptions";
import { Challenge } from "@wayward/game/game/options/modifiers/challenge/IChallenge";
import { IslandModifierType } from "@wayward/game/game/options/modifiers/island/IslandModifier";
import { MilestoneModifierGroup } from "@wayward/game/game/options/modifiers/milestone/MilestoneModifier";
import Riddle from "@wayward/game/game/riddle/Riddle";
import { TempType } from "@wayward/game/game/temperature/ITemperature";
import { TerrainType } from "@wayward/game/game/tile/ITerrain";
import { TileEventType } from "@wayward/game/game/tile/ITileEvent";
import { FireStage } from "@wayward/game/game/tile/events/IFire";
import { PartOfDay } from "@wayward/game/game/time/ITimeManager";
import Dictionary from "@wayward/game/language/Dictionary";
import { GameEndMessage } from "@wayward/game/language/dictionary/GameEndMessage";
import { Health, HealthAccuracy } from "@wayward/game/language/dictionary/Health";
import HumanName from "@wayward/game/language/dictionary/HumanName";
import InterruptChoice from "@wayward/game/language/dictionary/InterruptChoice";
import Message from "@wayward/game/language/dictionary/Message";
import { MiscTranslation } from "@wayward/game/language/dictionary/Misc";
import { MultiplayerCompatibility } from "@wayward/game/language/dictionary/MultiplayerCompatibility";
import Note from "@wayward/game/language/dictionary/Note";
import UiTranslation from "@wayward/game/language/dictionary/UiTranslation";
import { LighthouseName } from "@wayward/game/language/english/game/LighthouseName";
import { IslandName } from "@wayward/game/language/english/game/islandName/IslandName";
import { ModProvide, ModType } from "@wayward/game/mod/IModInformation";
import { CanLoadState, ModLoadFailureReason } from "@wayward/game/mod/IModManager";
import { DisconnectReason, JoinServerRetryReason, UnableToJoinReason } from "@wayward/game/multiplayer/IMultiplayer";
import { SaveImportErrorReason, SaveSort } from "@wayward/game/save/ISaveManager";
import { MusicPlaylist, SteamInputKeyboardPosition, TooltipVisibilityOption } from "@wayward/game/save/data/ISaveDataGlobal";
import { FontStyle } from "@wayward/game/ui/IUi";
import Bindable, { BindableType } from "@wayward/game/ui/input/Bindable";
import { CraftingSort } from "@wayward/game/ui/old/IOldUi";
import { DialogId } from "@wayward/game/ui/screen/screens/game/Dialogs";
import { MessageTimestamp, QuadrantComponentId } from "@wayward/game/ui/screen/screens/game/IGameScreenApi";
import { MessageFilterDefault } from "@wayward/game/ui/screen/screens/game/IMessages";
import { Quadrant, QuadrantComponentContextMenuAction } from "@wayward/game/ui/screen/screens/game/component/IQuadrantComponent";
import { MilestoneSort } from "@wayward/game/ui/screen/screens/game/dialog/IMilestonesDialog";
import { SkillSort } from "@wayward/game/ui/screen/screens/game/dialog/ISkillsDialog";
import { ActionSlotItemMethod, ActionSort } from "@wayward/game/ui/screen/screens/game/static/actions/IActionsDrawer";
import { MenuBarButtonType } from "@wayward/game/ui/screen/screens/game/static/menubar/IMenuBarButton";
import { CharacterSort } from "@wayward/game/ui/screen/screens/menu/menus/character/Character";
import { HelpArticle } from "@wayward/game/ui/screen/screens/menu/menus/help/IHelpArticle";
import { HighscoreSort } from "@wayward/game/ui/screen/screens/menu/menus/highscores/IHighscoresMenu";
import { Responsibility } from "@wayward/game/ui/screen/screens/menu/menus/main/IAbout";
import { Website } from "@wayward/game/ui/screen/screens/menu/menus/main/component/IWebsite";
import { ModSort } from "@wayward/game/ui/screen/screens/menu/menus/mods/IModsMenu";
import { Direction } from "@wayward/game/utilities/math/Direction";
import { ChangeType } from "@wayward/game/utilities/trello/ITrello";
import { WorldZ } from "@wayward/utilities/game/WorldZ";
export type Enum = Record<string, number> & Record<number, string>;
export declare const SYMBOL_ANY_DICTIONARY: unique symbol;
declare const dictionaryMap: {
    0: typeof ActionType;
    1: typeof ActionSlotItemMethod;
    2: typeof ActionSort;
    3: typeof AiType;
    4: typeof AutoSaveMode;
    5: typeof BadTemperatureLevel;
    6: typeof Bindable;
    7: typeof BindableType;
    8: typeof BiomeType;
    9: typeof BleedLevel;
    10: typeof BookType;
    11: typeof Challenge;
    12: typeof ChangeType;
    13: typeof CharacterSort;
    14: typeof CombatDangerLevel;
    15: typeof CombatStrength;
    16: typeof Command;
    17: typeof ContainerSort;
    18: typeof CreatureType;
    19: typeof CraftEfficacy;
    20: typeof CraftingSort;
    21: typeof CreatureType;
    22: typeof CurseComponent;
    23: typeof DamageType;
    24: typeof Deity;
    25: typeof DeityAlignmentLevel;
    26: typeof Deity;
    27: typeof Deity;
    28: typeof DialogId;
    29: typeof Direction;
    30: typeof InfoDisplayLevel;
    31: typeof DoodadType;
    32: typeof DoodadTypeExtra;
    33: typeof DoodadTypeGroup;
    34: typeof DrawnMapTheme;
    35: typeof DurabilityLevel;
    36: typeof EquipEffect;
    37: typeof EquipType;
    38: typeof ExhaustionLevel;
    39: typeof FerocityLevel;
    40: typeof FireStage;
    41: typeof FontStyle;
    42: typeof GameEndMessage;
    43: typeof GameMode;
    44: typeof GrowingStage;
    45: typeof GrowingStage;
    46: typeof Health;
    47: typeof HealthAccuracy;
    48: typeof HelpArticle;
    49: typeof HighscoreSort;
    50: typeof HumanName;
    51: symbol;
    52: typeof InspectType;
    53: typeof InterruptChoice;
    54: typeof IslandModifierType;
    55: typeof IslandName;
    56: typeof BiomeType;
    57: typeof BiomeType;
    58: typeof IslandModifierType;
    59: typeof CreatureType;
    60: typeof ItemType;
    61: typeof ItemTypeExtra;
    62: typeof ItemTypeGroup;
    63: typeof JoinServerRetryReason;
    64: typeof Level;
    65: typeof LighthouseName;
    66: typeof Load;
    67: symbol;
    68: typeof MagicalPropertyType;
    69: typeof MapQuality;
    70: typeof MenuBarButtonType;
    71: typeof Message;
    72: typeof MessageFilterDefault;
    73: typeof MessageTimestamp;
    74: typeof Milestone;
    75: typeof MilestoneModifierGroup;
    76: typeof MilestoneSort;
    77: typeof MiscTranslation;
    78: typeof CanLoadState;
    79: typeof ModLoadFailureReason;
    80: typeof ModProvide;
    81: typeof ModSort;
    82: typeof ModType;
    83: typeof MultiplayerCompatibility;
    84: typeof DisconnectReason;
    85: typeof MusicPlaylist;
    86: typeof Note;
    87: typeof NPCType;
    88: symbol;
    89: typeof PartOfDay;
    90: typeof Prompt;
    91: typeof QuadrantComponentId;
    92: typeof QuadrantComponentContextMenuAction;
    93: typeof Quality;
    94: typeof QuestType;
    95: typeof QuestRequirementType;
    96: typeof RecipeLevel;
    97: typeof Direction;
    98: typeof Riddle;
    99: typeof SaveImportErrorReason;
    100: typeof SaveSort;
    101: typeof SkillType;
    102: typeof SkillSort;
    103: typeof Source;
    104: typeof Stat;
    105: typeof StatusType;
    106: typeof SteamInputKeyboardPosition;
    107: typeof Responsibility;
    108: typeof TempType;
    109: typeof TerrainType;
    110: typeof TileEventType;
    111: typeof TooltipVisibilityOption;
    112: typeof UiTranslation;
    113: typeof Quadrant;
    114: typeof UnableToJoinReason;
    115: typeof UnlockedRecipesStrategy;
    116: typeof UsableActionType;
    117: typeof Website;
    118: typeof WeightStatus;
    119: typeof WorldZ;
};
export declare const strictDictionaries: {
    0: typeof ActionType;
    1: typeof ActionSlotItemMethod;
    2: typeof ActionSort;
    3: typeof AiType;
    4: typeof AutoSaveMode;
    5: typeof BadTemperatureLevel;
    6: typeof Bindable;
    7: typeof BindableType;
    8: typeof BiomeType;
    9: typeof BleedLevel;
    10: typeof BookType;
    11: typeof Challenge;
    12: typeof ChangeType;
    13: typeof CharacterSort;
    14: typeof CombatDangerLevel;
    15: typeof CombatStrength;
    16: typeof Command;
    17: typeof ContainerSort;
    18: typeof CreatureType;
    19: typeof CraftEfficacy;
    20: typeof CraftingSort;
    21: typeof CreatureType;
    22: typeof CurseComponent;
    23: typeof DamageType;
    24: typeof Deity;
    25: typeof DeityAlignmentLevel;
    26: typeof Deity;
    27: typeof Deity;
    28: typeof DialogId;
    29: typeof Direction;
    30: typeof InfoDisplayLevel;
    31: typeof DoodadType;
    32: typeof DoodadTypeExtra;
    33: typeof DoodadTypeGroup;
    34: typeof DrawnMapTheme;
    35: typeof DurabilityLevel;
    36: typeof EquipEffect;
    37: typeof EquipType;
    38: typeof ExhaustionLevel;
    39: typeof FerocityLevel;
    40: typeof FireStage;
    41: typeof FontStyle;
    42: typeof GameEndMessage;
    43: typeof GameMode;
    44: typeof GrowingStage;
    45: typeof GrowingStage;
    46: typeof Health;
    47: typeof HealthAccuracy;
    48: typeof HelpArticle;
    49: typeof HighscoreSort;
    50: typeof HumanName;
    51: symbol;
    52: typeof InspectType;
    53: typeof InterruptChoice;
    54: typeof IslandModifierType;
    55: typeof IslandName;
    56: typeof BiomeType;
    57: typeof BiomeType;
    58: typeof IslandModifierType;
    59: typeof CreatureType;
    60: typeof ItemType;
    61: typeof ItemTypeExtra;
    62: typeof ItemTypeGroup;
    63: typeof JoinServerRetryReason;
    64: typeof Level;
    65: typeof LighthouseName;
    66: typeof Load;
    67: symbol;
    68: typeof MagicalPropertyType;
    69: typeof MapQuality;
    70: typeof MenuBarButtonType;
    71: typeof Message;
    72: typeof MessageFilterDefault;
    73: typeof MessageTimestamp;
    74: typeof Milestone;
    75: typeof MilestoneModifierGroup;
    76: typeof MilestoneSort;
    77: typeof MiscTranslation;
    78: typeof CanLoadState;
    79: typeof ModLoadFailureReason;
    80: typeof ModProvide;
    81: typeof ModSort;
    82: typeof ModType;
    83: typeof MultiplayerCompatibility;
    84: typeof DisconnectReason;
    85: typeof MusicPlaylist;
    86: typeof Note;
    87: typeof NPCType;
    88: symbol;
    89: typeof PartOfDay;
    90: typeof Prompt;
    91: typeof QuadrantComponentId;
    92: typeof QuadrantComponentContextMenuAction;
    93: typeof Quality;
    94: typeof QuestType;
    95: typeof QuestRequirementType;
    96: typeof RecipeLevel;
    97: typeof Direction;
    98: typeof Riddle;
    99: typeof SaveImportErrorReason;
    100: typeof SaveSort;
    101: typeof SkillType;
    102: typeof SkillSort;
    103: typeof Source;
    104: typeof Stat;
    105: typeof StatusType;
    106: typeof SteamInputKeyboardPosition;
    107: typeof Responsibility;
    108: typeof TempType;
    109: typeof TerrainType;
    110: typeof TileEventType;
    111: typeof TooltipVisibilityOption;
    112: typeof UiTranslation;
    113: typeof Quadrant;
    114: typeof UnableToJoinReason;
    115: typeof UnlockedRecipesStrategy;
    116: typeof UsableActionType;
    117: typeof Website;
    118: typeof WeightStatus;
    119: typeof WorldZ;
};
export type DictionaryEnum = (typeof dictionaryMap)[Dictionary];
export type DictionaryEntryEnums = {
    [DICTIONARY in keyof typeof dictionaryMap]: (typeof dictionaryMap)[DICTIONARY] extends infer ENTRY_ENUM ? ENTRY_ENUM[keyof ENTRY_ENUM] : never;
};
declare function getByEnum(enumObject: DictionaryEnum): Dictionary;
declare const dictionaries: Descriptions<Dictionary, Enum | typeof SYMBOL_ANY_DICTIONARY> & {
    getByEnum: typeof getByEnum;
};
export default dictionaries;
